{"version":3,"sources":["components/FeedbackOptions/FeedbackOptions.jsx","components/statistics/Statistics.jsx","components/sectionTitle/Section.jsx","components/Notification/Notification.jsx","components/helpers/copyInNewObject.jsx","components/helpers/hasCountTotal.jsx","components/MainPage/MainPage.jsx","App.js","reportWebVitals.js","index.js","components/statistics/Statistics.module.css","components/FeedbackOptions/FeedbackOptions.module.css"],"names":["FeedbackOptions","onLeaveFeedback","buttonListItems","options","map","item","onClick","className","style","btn","Statistics","data","good","neutral","bad","total","positivePercentage","title","Object","entries","wrapper","Section","children","Notification","message","copyInNewObject","obj","newState","key","hasCountTotal","values","reduce","tot","feed","MainPage","state","handleClick","name","newName","toLowerCase","setState","prevState","countPositiveFeedbackPercentage","positive","Math","round","countTotalFeedback","this","keys","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.50a1be5e.chunk.js","sourcesContent":["import PropTypes from \"prop-types\";\r\nimport style from './FeedbackOptions.module.css'\r\n\r\nconst FeedbackOptions = ({onLeaveFeedback, options}) => {\r\n\r\nconst buttonListItems = options.map((item)=> <button key={item} onClick={()=> onLeaveFeedback(item)}className={style.btn}>{item}</button>)\r\n    return ( <div>\r\n        {buttonListItems}\r\n    </div> );\r\n}\r\n \r\nexport default FeedbackOptions;\r\n\r\nFeedbackOptions.propTypes = {\r\n    options: PropTypes.array.isRequired,\r\n    onLeaveFeedback: PropTypes.func.isRequired,\r\n  };","import PropTypes from \"prop-types\";\r\nimport style from \"./Statistics.module.css\";\r\n\r\nconst Statistics = ({\r\n  data,\r\n  good,\r\n  neutral,\r\n  bad,\r\n  total,\r\n  positivePercentage,\r\n  title\r\n}) => {\r\n  const arrayFromData = Object.entries(data).map((item) => {\r\n    return (\r\n      <div key={item} className={style.wrapper}>\r\n        <h3 className={style.title}>\r\n          {item[0]}: {item[1]}\r\n        </h3>\r\n      </div>\r\n    );\r\n  });\r\n\r\n  return (\r\n    <>\r\n      <h1>{title}</h1>\r\n      <h3>Good: {good}</h3>\r\n      <h3>Neutral: {neutral}</h3>\r\n      <h3>Bad: {bad}</h3>\r\n      <h3>Total: {total}</h3>\r\n      <h3>\r\n        Positive feedback: {positivePercentage ? positivePercentage + \"%\" : \"0\"}\r\n      </h3>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Statistics;\r\n\r\nStatistics.propTypes = {\r\n  data: PropTypes.array.isRequired,\r\n  good: PropTypes.string.isRequired,\r\n  neutral: PropTypes.string.isRequired,\r\n  bad: PropTypes.string.isRequired,\r\n  total: PropTypes.number.isRequired,\r\n  positivePercentage: PropTypes.number.isRequired,\r\n  title: PropTypes.string.isRequired,\r\n};\r\n","import PropTypes from \"prop-types\";\r\n\r\nconst Section = ({ title, children }) => {\r\n  return (\r\n    <>\r\n      <h1>{title}</h1>\r\n      {children}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Section;\r\n\r\nSection.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n};","import PropTypes from \"prop-types\";\r\n\r\nconst Notification = ({message}) => {\r\n    return ( <h2>{message}</h2> );\r\n}\r\n \r\nexport default Notification;\r\n\r\nNotification.propTypes = {\r\n    message: PropTypes.string.isRequired,\r\n  };","export const copyInNewObject = (obj) => {\r\n    const newState = {}\r\n    for (let key in obj) {\r\n      newState[key] = obj[key];\r\n    }\r\n    return newState\r\n}\r\n \r\n","export const hasCountTotal = (obj)=> {\r\n    const total = Object.values(obj).reduce((tot, feed)=> tot+=feed)\r\n      return total\r\n}","import React, { Component } from \"react\";\r\nimport FeedbackOptions from \"../FeedbackOptions/FeedbackOptions\";\r\nimport Statistics from \"../statistics/Statistics\";\r\nimport Section from \"../sectionTitle/Section\";\r\nimport Notification from \"../Notification/Notification\";\r\nimport { copyInNewObject } from \"../helpers/copyInNewObject\";\r\nimport { hasCountTotal } from \"../helpers/hasCountTotal\";\r\n\r\nclass MainPage extends Component {\r\n  state = {\r\n    good: 0,\r\n    neutral: 0,\r\n    bad: 0,\r\n  };\r\n\r\n  handleClick = (name) => {\r\n    const newName = name.toLowerCase();\r\n    this.setState((prevState) => ({\r\n      [newName]: prevState[newName] + 1,\r\n    }));\r\n  };\r\n\r\n  countPositiveFeedbackPercentage = () => {\r\n    const newState = copyInNewObject(this.state);\r\n    const positive = Object.values(newState)[0];\r\n    const total = hasCountTotal(newState);\r\n    return Math.round((positive / total) * 100);\r\n  };\r\n\r\n  countTotalFeedback = () => {\r\n    const newState = copyInNewObject(this.state);\r\n    const total = hasCountTotal(newState);\r\n    return total;\r\n  };\r\n  render() {\r\n    const { good, neutral, bad } = this.state;\r\n    const options = Object.keys(this.state);\r\n    return (\r\n      <>\r\n        <Section title=\"Please leave feedback\">\r\n          <FeedbackOptions\r\n            options={options}\r\n            onLeaveFeedback={this.handleClick}\r\n          />\r\n        </Section>\r\n        <Section title=\"Statistics\">\r\n          {this.countTotalFeedback() ? (\r\n            <Statistics\r\n              data={this.state}\r\n              good={good}\r\n              neutral={neutral}\r\n              bad={bad}\r\n              total={this.countTotalFeedback()}\r\n              positivePercentage={this.countPositiveFeedbackPercentage()}\r\n            />\r\n          ) : (\r\n            <Notification message=\"No feedback given\" />\r\n          )}\r\n        </Section>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MainPage;\r\n","\nimport './App.css';\nimport MainPage from './components/MainPage/MainPage.jsx'\n\nfunction App() {\n  return (\n    <div>\n       <MainPage/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"Statistics_title__2oScl\",\"wrapper\":\"Statistics_wrapper__3ggKf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"FeedbackOptions_btn__1zk3L\"};"],"sourceRoot":""}